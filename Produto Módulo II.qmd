---
title: "Análise do Inventário Florestal Nacional no Bioma Cerrado"
author: "Rogerio Vidal de Siqueira"
date: "`r format(Sys.Date(),'%d/%m/%Y')`"
format: docx
crossref:
 fig-title: '**Figura**'
 fig-labels: arabic
 title-delim: "**-**"
 tbl-title: '**Tabela**'
fig-alig: left
fig-cap-location: top
tbl-cap-location: top
tbl-alig: center
tbl-cap-alig: center
lang: pt 
execute: 
  echo: false
  warning: false
  message: false
  progress: false
  cache: false
editor: source
---

```{r sets, echo=F, message=FALSE, warning=FALSE}

# PRE-SETS ----
rm(list=ls()) # limpa  o ambiente de trabalho


# PACOTES

if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, # pacote para manipulação de dados
               utils, # pacote base
               downloader, # pacote para download de arquivos
               sf, #pacote para manipulação de dados espaciais
               geobr, # pacote para baixar shapefiles do Brasil
               flextable # pacote para criar tabelas
               )


#pasta=paste0("Saidas-Exercicios-", Sys.Date()) #cria uma pasta para as saídas do dia
#if(!dir.exists(pasta)) dir.create(pasta) #cria uma pasta para as saídas do dia

# Ajuste flaxtable das casas decimais
set_flextable_defaults(
  digits = 2,
  decimal.mark = ",",
  big.mark = ".",
  na_str = "<na>"
)

```


```{r funcoes, warning=FALSE, show=FALSE}

# Função criada para baixar e ler arquivos csv da base de dados do Inventário Florestal Nacional.
download_e_leitura_csv <- function (url, dir, file ) {
  tempFile <- tempfile()
  tempDir <- tempdir()
  
  download(url, destfile = tempFile)
  
  
  unzip(zipfile = tempFile, exdir = tempDir)
  
  caminho_dados <- file.path(tempDir, dir, file)
  
  csv <- read_csv2(caminho_dados, locale = locale(encoding = "ISO-8859-1"))
  
  # unlink(tempFile)
  # unlink(tempDir)

}


# Função criada para baixar e ler arquivos txt da base de dados do Jardim Botânico do Rio de Janeiro.

# Essa função não será utilizada nesse script, mas pode ser útil para futuras análises.
download_e_leitura_txt <- function (url, file ) {
tempFile <- tempfile(fileext = ".zip")
tempDir <- tempdir()
  
download(url_taxon, destfile = tempFile, mode = "wb")

unzip(zipfile = tempFile, exdir = tempDir)
  
caminho_dados <- file.path(tempDir, file)

df <- read_delim(caminho_dados, delim = "\t", locale = locale(encoding = "UTF-8"))

}

```

## Carregar dados da malha municipal dos municípios que fazem parte da Região Integrada de Desenvolvimento do Distrito Federal e Entorno (RIDE-DF)

```{r , warning=FALSE, message=FALSE}

#datasets <- list_geobr() # Lista de datasets disponíveis

lista_mun_RIDE <- c(
                    "Cristalina", "Águas Lindas de Goiás", "Cabeceiras", 
                    "Buritis", "Unaí", "Goianésia",
                    "Alexânia", "Pirenópolis", "Santo Antônio do Descoberto",
                    "Cavalcante", "Brasília",  "Água Fria de Goiás", 
                    "Alto Paraíso de Goiás", "Alvorada do Norte", "Cidade Ocidental", 
                    "Flores de Goiás", "Formosa", "Luziânia",  
                    "Planaltina", "São João D'aliança", "Simolândia", 
                    "Valparaíso de Goiás", "Vila Boa", "Arinos", 
                    "Cabeceira Grande", "Abadiânia",  "Barro Alto", 
                    "Mimoso de Goiás", "Niquelândia", "Novo Gama", 
                    "Padre Bernardo", "Cocalzinho de Goiás", "Corumbá de Goiás", 
                    "Vila Propício" 
                    )

# Baixar shapefile do Brasil
mun_ride <- read_municipality(
    year = 2022,
  showProgress = FALSE
  )%>%
  filter(abbrev_state == "GO" | abbrev_state == "DF"| abbrev_state == "MG") %>%  
  filter(name_muni %in% lista_mun_RIDE)

# Mostrar os domicílio
# mun_ride

# rm(datasets)

```

## Carregar dados por link

```{r, warning=FALSE, message=FALSE}
url_socio <- "https://snif.florestal.gov.br/images/dados_abertos/IFN_Bioma_Cerrado_LSA_B3_S2_v1.zip"
url_bio <- "https://snif.florestal.gov.br/images/dados_abertos/IFN_Bioma_Cerrado_Biofisico_F6_v1.zip"

levantamento_socioambiental <- download_e_leitura_csv(url_socio, "IFN_Bioma_Cerrado_LSA_B3_S2_v1.1", "dados IFN-LSA Cerrado plantas mais utilizadas.csv")

levantamento_biofisio <- download_e_leitura_csv(url_bio, "IFN_Bioma_Cerrado_Biofisico_F6_v1.1", "dados IFN- Bioma Cerrado Biofisico F6 v.1.1.csv")

```

## TRATAMENTO DE DADOS DO IFN

```{r, warning=FALSE, message=FALSE}
# Filtrar somente os dados que possuem coordenadas
tab_soc <- levantamento_socioambiental[!is.na(levantamento_socioambiental$LONG) & !is.na(levantamento_socioambiental$LAT),]

tab_bio <- levantamento_biofisio[!is.na(levantamento_biofisio$Long) & !is.na(levantamento_biofisio$Lat),]

# Converter a tabela para um dado espacial
geo_soc <- tab_soc %>% 
  st_as_sf(coords = c("LONG", "LAT"), crs = 4326)

geo_bio <- tab_bio %>% 
  st_as_sf(coords = c("Long", "Lat"), crs = 4326)


# Filtrar somente os dados do DF, GO e MG

geo_soc_DFGOMG <- geo_soc %>% 
  filter(grepl("GO|DF|MG",LOTE))

geo_bio_DFGOMG <- geo_bio %>% 
  filter(grepl("GO|DF|MG",LOTE))

#print(dim(geo_soc_DFGOMG))
#print(dim(geo_bio_DFGOMG))

# Relação espacial entre os municípios da RIDE-DF e os dados do IFN (GO/DF/MG)

tab_bio_ride <- geo_bio_DFGOMG %>% # Tabela Biofísica do IFN
  st_transform(crs = 4674) %>%
  st_join(mun_ride) %>%
  filter(!is.na(name_muni))


tab_socio_ride <- geo_soc_DFGOMG %>% # Tabela Sociológica do IFN
  st_transform(crs = 4674) %>%
  st_join(mun_ride) %>%
  filter(!is.na(name_muni))

# Na coluna TAXON_ID, existem valores que não são numéricos, então é necessário filtrar somente os valores numéricos. Os valores que aparecem são: Em análise, Indivíduo Morto. Como essa coluna é chave primária para juntar com a tabela Taxon, é necessário filtrar somente os valores numéricos.

geo_bio_DFGOMG_filtrado <- geo_bio_DFGOMG %>% 
  mutate(num_check = as.numeric(TAXON_ID)) %>% # Verificar se é numérico
  filter(!is.na(num_check)) %>% # Filtrar somente os valores numéricos
  select(-num_check)


# rm(tab_taxon_filtrado)

```

```{r}
# Salvar arquivos
#st_write(geo_soc_DFGO, "geo_levantamento_socioambiental_limpo_filtro_go.shp", delete_dsn = TRUE)
```

## Quais são os tipos de usos presente na tabela Sociológica?

```{r}



# Tipos de usos da tabela Sociológica 
tipos_usos <- tab_socio_ride %>% # Tabela Sociológica do IFN
  filter(!PARTE_UTI == 'Sem informação') %>% # Filtrar somente os valores únicos
  group_by(PARTE_UTI) %>% # Agrupar por município e espécie
  summarise(Quantidade = n()) %>%# Listar os tipos de uso
  arrange(desc(Quantidade)) # Ordenar de forma decrescente


# Tabela com os tipos de usos

tabela_usos <- tipos_usos %>% 
  st_drop_geometry() %>%
  flextable() %>%
  set_header_labels(
    PARTE_UTI = "Tipos de Usos",
    Quantidade = "Quantidade de Usos"
  ) %>%
    bold(j = 2,
       i = c(1, 2)) %>%
  width( j = 1, width = 1.5) %>%
  width( j = 2, width = 1)
  
tabela_usos

```

## Quais são os produtos mais citados na tabela Sociológica?

```{r}

# Produtos mais citados 
produtos_mais_citados <- tab_socio_ride %>% # Tabela Sociológica do IFN
  filter(!`NOME DESCRITO NO LSA` == 'Sem informação') %>% # Filtrar somente os valores únicos
  group_by(`NOME DESCRITO NO LSA`) %>% # Agrupar por município e espécie
  summarise(Quantidade = n()) %>%# Listar os tipos de uso
  arrange(desc(Quantidade)) %>% # Ordenar de forma decrescente
  head(20) # Listar os 20 mais citados


```

## Quais as espécies mais usadas por município?

```{r}

rm(especie_socio_ride)

especie_socio_ride <- tab_socio_ride %>% # Tabela Sociológica do IFN
  filter(!`NOME DESCRITO NO LSA` == 'Sem informação') %>% # Filtrar somente os valores únicos
  group_by(name_muni, `NOME DESCRITO NO LSA`) %>% # Agrupar por município e espécie
  summarise(Quantidade = n()) %>% # Contar a quantidade de espécies
  arrange(desc(name_muni), desc(Quantidade)) %>% # Ordenar de forma decrescente pela quantidade
  group_by(name_muni) %>% # Reagrupar por município
  top_n(5, Quantidade) # Selecionar os 5 maiores valores de cada municípi
  

# Espacializar
ggplot(especie_socio_ride) + 
  geom_sf() +
  theme_minimal()

# lista_especies_usadas_socio_ride <- tab_socio_ride %>% # Tabela Sociológica do IFN
#  distinct(name_muni, `NOME DESCRITO NO LSA`) %>% # Filtrar somente os valores únicos
#  group_by(name_muni) %>% # Agrupar por município
#  summarise(especies_listadas = toString(`NOME DESCRITO NO LSA`)) # Listar as espécies

# lista_especies_tipoUso_usadas_socio_ride <- tab_socio_ride %>% # Tabela Sociológica do IFN
#  distinct(name_muni, `NOME DESCRITO NO LSA`, PARTE_UTI) %>% # Filtrar somente os valores únicos
#  group_by(name_muni, `NOME DESCRITO NO LSA`) %>% # Agrupar por município e espécie
#  summarise(TIPOS_USO = toString(PARTE_UTI)) # Listar os tipos de uso

```
